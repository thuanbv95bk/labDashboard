toggleExpandAll() {
    this.isExpandAll = !this.isExpandAll;
    if (!this.isExpandAll) {
      this.collapseAll();
    } else {
      this.expandAll();
    }
  }
  // mở rộng
  expandAll() {
    for (let i = 0; i < this.listGroups.length; i++) {
      const element = this.listGroups[i];
      element.isHide = false;
      element.isHideChildren = false;
    }
    // if (this.filteredTasks && Array.isArray(this.filteredTasks) && this.filteredTasks.length > 0) {
    //   for (let i = 0; i < this.filteredTasks.length; i++) {
    //     const element = this.filteredTasks[i];
    //     element.IsHide = false;
    //     element.IsHideChildren = false;
    //   }
    // }
  }

  collapseAll() {
    for (let i = 0; i < this.listGroups.length; i++) {
      const element = this.listGroups[i];
      if (this.listGroups.find((x) => x.PK_VehicleGroupID === element.parentVehicleGroupId)) {
        element.isHide = true;
      }
      element.isHideChildren = true;
    }
    // if (this.item && Array.isArray(this.filteredTasks) && this.filteredTasks.length > 0) {
    //   for (let i = 0; i < this.filteredTasks.length; i++) {
    //     const element = this.filteredTasks[i];
    //     if (
    //       ((!this.filterNameText || this.filterNameText.trim() === '') && element.TreeNodeLevel > 0) ||
    //       this.filteredTasks.find((x) => x.C_Task_Id === element.Parent_Id)
    //     ) {
    //       element.IsHide = true;
    //     }
    //     element.IsHideChildren = true;
    //   }
    // }
  }
  showHideChildren(item: Groups) {
    if (item.isHideChildren) {
      this.showChildren1(item);
    } else {
      this.hideChildren1(item);
    }
  }

  //

  showChildren1(item: Groups) {
    item.isHideChildren = false;

    if (item.groupsChild.length == 0) return;

    item.groupsChild.forEach((x) => {
      const index = this.listGroups.findIndex((y) => y.parentVehicleGroupId == x.parentVehicleGroupId && y.parentVehicleGroupId > 0);
      console.log(index);

      if (index > -1) {
        this.listGroups[index].isHide = false;
        this.listGroups[index].isHideChildren = false;
      }
    });
  }
  hideChildren1(item: Groups) {
    item.isHideChildren = true;
    if (item.groupsChild.length == 0) return;

    item.groupsChild.forEach((x) => {
      const index = this.listGroups.findIndex((y) => y.parentVehicleGroupId == x.parentVehicleGroupId && y.parentVehicleGroupId > 0);
      console.log(index);
      if (index > -1) {
        this.listGroups[index].isHide = true;
        this.listGroups[index].isHideChildren = true;
      }
    });
  }




// listGroups: Groups[] = [
  //   {
  //     PK_VehicleGroupID: 1,
  //     parentVehicleGroupId: null,
  //     name: 'Đội xe 1',
  //     isSelected: false,
  //     isHide: false,
  //     hasChild: true,
  //     isHideChildren: false,
  //     FK_CompanyID: null,
  //     status: false,
  //     isDeleted: false,
  //     groupsChild: [],
  //   },
  //   {
  //     PK_VehicleGroupID: 2,
  //     parentVehicleGroupId: 1,
  //     name: 'Đội xe 1.1',
  //     isSelected: false,
  //     isHide: false,
  //     hasChild: false,
  //     isHideChildren: false,
  //     FK_CompanyID: null,
  //     status: false,
  //     isDeleted: false,
  //     groupsChild: [],
  //   },
  //   {
  //     PK_VehicleGroupID: 3,
  //     parentVehicleGroupId: null,
  //     name: 'Đội xe 2',
  //     isSelected: false,
  //     isHide: false,
  //     hasChild: false,
  //     isHideChildren: false,
  //     FK_CompanyID: null,
  //     status: false,
  //     isDeleted: false,
  //     groupsChild: [],
  //   },
  // ];




animations: [
    trigger('openClose', [
      state(
        'open',
        style({
          transform: 'rotate(0deg)',
        })
      ),
      state(
        'closed',
        style({
          transform: 'rotate(90deg)',
        })
      ),
      transition('open => closed', [animate('0.5s ease-out')]),
      transition('closed => open', [animate('0.5s ease-in')]),
    ]),
    trigger('showHide', [
      state(
        'open',
        style({
          opacity: '1',
        })
      ),
      state(
        'closed',
        style({
          height: '0',
          opacity: '0',
        })
      ),
      transition('open => closed', [animate('0.5s ease-in')]),
      transition('closed => open', [animate('0.5s ease-out')]),
    ]),
  ],





<!-- <table class="table table-tree">
                    <tbody>
                      <tr
                        *ngFor="let item of listGroups | filter : availableGroupSearch : 'name'; let i = index"
                        [ngClass]="{ 'hide-row': item.isHide }">
                        <td class="text-center" [@showHide]="!item.isHide ? 'open' : 'closed'">
                          <span *ngIf="item.hasChild">
                            <i
                              (click)="showHideChildren(item)"
                              [ngClass]="{ collapse: !item.isHideChildren }"
                              [@openClose]="!item.isHideChildren ? 'open' : 'closed'"
                              [ngClass]="!item.isHideChildren ? 'fa-solid fa-caret-down' : 'fa-solid fa-caret-up'"></i>
                          </span>
                        </td>

                        <td>
                          <div [ngClass]="paddingLevel(item)" [@showHide]="!item.isHide ? 'open' : 'closed'">
                            <div *ngIf="!item.hasChild" style="width: 24px"></div>
                            <div class="form-check">
                              <input class="form-check-input" type="checkbox" [(ngModel)]="item.isSelected" />
                              <i class="fa fa-folder"></i>
                              <div class="form-check-label d-inline">{{ item.name }}</div>
                            </div>
                          </div>
                        </td>
                      </tr>
                    </tbody>
                  </table> -->